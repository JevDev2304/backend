import { Module } from '@nestjs/common';
import { TypeOrmModule } from '@nestjs/typeorm';
import { ConfigModule, ConfigService } from '@nestjs/config';

// --- Entidades ---
// Importa TODAS tus entidades para la configuraci√≥n global de TypeORM.
// Esto es CR√çTICO para que TypeORM las reconozca y pueda inyectar los repositorios.
import { Product } from './products/products.entity'; // Tu entidad Producto

// --- M√≥dulos de Caracter√≠sticas ---
// Importa tus m√≥dulos ya refactorizados.
import { ProductsModule } from './products/products.module'; // ¬°Tu m√≥dulo de productos encapsulado!

// --- Controladores Globales / de la Aplicaci√≥n ---
// Mant√©n aqu√≠ solo los controladores que NO pertenecen a un m√≥dulo de caracter√≠stica espec√≠fico.
import { AppController } from './app.controller';

// --- Servicios Globales / de la Aplicaci√≥n ---
// Mant√©n aqu√≠ solo los servicios que NO pertenecen a un m√≥dulo de caracter√≠stica espec√≠fico.
import { AppService } from './app.service';

@Module({
  imports: [
    ConfigModule.forRoot({
      isGlobal: true,
    }),
    TypeOrmModule.forRootAsync({
      imports: [ConfigModule],
      inject: [ConfigService],
      useFactory: (configService: ConfigService) => ({
        type: 'postgres',
        host: configService.get<string>('DB_HOST'),
        port: parseInt(configService.get<string>('DB_PORT') || '5432', 10),
        username: configService.get<string>('DB_USERNAME'),
        password: configService.get<string>('DB_PASSWORD'),
        database: configService.get<string>('DB_NAME'),
        ssl: true,
        extra: {
          ssl: {
            rejectUnauthorized: false,
          },
        },
        entities: [ // ¬°Aqu√≠ deben ir TODAS tus entidades! üí°
          Product, // Aseg√∫rate de que tu entidad 'Product' est√© listada aqu√≠.
          // Cuando crees Transaction, Delivery, Customer, etc., las a√±adir√°s aqu√≠ tambi√©n.
        ],
        synchronize: false, // Mant√©n 'false' si tus entidades son espejos y gestionas las migraciones.
      }),
    }),
    // M√≥dulos de caracter√≠sticas que ya has refactorizado:
    ProductsModule,
  ],
  controllers: [
    AppController,
    // Cuando crees el TransactionsModule, eliminar√°s TransactionsController de aqu√≠.
  ],
  providers: [
    AppService,
    // Cuando crees el TransactionsModule, CustomersModule, etc., eliminar√°s sus servicios/repositorios de aqu√≠.
  ],
})
export class AppModule {}